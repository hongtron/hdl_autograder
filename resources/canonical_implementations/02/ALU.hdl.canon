// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:

    // x input processing, controlled by the 'zx' and 'nx' bits
    Mux16 (a=x, b=false, sel=zx, out=x1);
    Not16 (in=x1, out=notX1);
    Mux16 (a=x1, b=notX1, sel=nx, out=x2);

    // y input processing, controlled by the 'zy' and 'ny' bits
    Mux16 (a=y, b=false, sel=zy, out=y1);
    Not16 (in=y1, out=notY1);
    Mux16 (a=y1, b=notY1, sel=ny, out=y2);

    // Compute both functions and select based on the 'f' bit
    And16 (a=x2, b=y2, out=and);
    Add16 (a=x2, b=y2, out=add);
    Mux16 (a=and, b=add, sel=f, out=out1);

    // Output inversion, controlled by the 'no' bit
    // 'out' bit 15 is the 'ng' flag
    Not16 (in=out1, out=notOut1);
    Mux16 (a=out1, b=notOut1, sel=no, out=out,
          out[0..7]=outL8, out[8..15]=outH8, out[15]=ng);

    // Compute zr flag
    Or8Way (in=outH8, out=orH8);
    Or8Way (in=outL8, out=orL8);
    Or     (a=orH8, b=orL8, out=nz);
    Not    (in=nz, out=zr);
}


// Alternate implementation with slightly higher abstraction.
// There is no reason to prefer either implementation.
/*
    // x input processing, controlled by the 'zx' and 'nx' bits
    Not16     (in=x, out=notX);
    Mux4Way16 (a=x, b=notX, c=false, d=true, sel[1]=zx, sel[0]=nx, out=x2);

    // y input processing controlled by the 'zy' and 'ny' bits
    Not16     (in=y, out=notY);
    Mux4Way16 (a=y, b=notY, c=false, d=true, sel[1]=zy, sel[0]=ny, out=y2);
    ...
*/
